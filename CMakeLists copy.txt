cmake_minimum_required(VERSION 3.5)
project( kindyn )

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/devel/lib)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -g -fext-numeric-literals")

set(CMAKE_BUILD_TYPE Debug)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake/")

execute_process(COMMAND grep -o BCM /proc/cpuinfo OUTPUT_VARIABLE IAMRASPBERRYPI3)
if (IAMRASPBERRYPI3)
    message(STATUS "detected raspberry pi, defining EIGEN_DONT_ALIGN_STATICALLY!!!")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DEIGEN_DONT_ALIGN_STATICALLY")
endif ()

#==============================================================================
# Dependencies
#==============================================================================
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rclpy REQUIRED)
find_package(rosbag2 REQUIRED)
find_package(std_msgs REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(builtin_interfaces REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(controller_interface REQUIRED)
find_package(hardware_interface REQUIRED)
find_package(controller_manager REQUIRED)

find_package(eigen_conversions REQUIRED)
find_package(effort_controllers REQUIRED)
find_package(roboy_control_msgs REQUIRED)



#catkin_package( CATKIN_DEPENDS roboy_middleware_msgs common_utilities
#        INCLUDE_DIRS include)

# Export dependencies
ament_export_dependencies(
  roboy_middleware_msgs
  common_utilities
)

# Export include directories INCLUDE_DIRS include
ament_export_include_directories(include)

# Don't forget to finalize the package
ament_package()






# add_executable(my_target src/my_target.cpp)

# 为my_target指定依赖项
ament_target_dependencies(my_target
  "rclcpp"
  "roboy_middleware_msgs"
  "common_utilities"
)

# 指定头文件目录
target_include_directories(my_target PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>
)


# Eigen
#find_package(PkgConfig REQUIRED )
#pkg_check_modules(EIGEN3 REQUIRED eigen3)
#include_directories(${EIGEN3_INCLUDE_DIRS})

#Eigen
find_package(Eigen3 REQUIRED)
include_directories(${Eigen3_INCLUDE_DIRS})



# libxml++
find_package(LibXML++ REQUIRED)
include_directories(${LibXML++_INCLUDE_DIRS})

# idyntree
find_package(iDynTree 0.11.1 REQUIRED)
include_directories(${iDynTree_INCLUDE_DIRS})

# qpOASES
find_package(qpOASES REQUIRED)
include_directories(${qpOASES_INCLUDE_DIRS})

# find openmp support
find_package(OpenMP)
if (OPENMP_FOUND)
	set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
	set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()


include_directories(
		include/
       ${ament_INCLUDE_DIRS}
)




#==============================================================================
# Application
#==============================================================================

# CARDSflow hardware interface
add_library(CardsflowHardwareInterface
		src/controller/cardsflow_state_interface.cpp
		src/controller/cardsflow_command_interface.cpp)
add_dependencies(CardsflowHardwareInterface roboy_middleware_msgs_generate_messages_cpp)
target_link_libraries(CardsflowHardwareInterface ${catkin_LIBRARIES})



# Cable Length Controller
add_library(CableLengthController src/controller/cableLengthController.cpp )
add_dependencies(CableLengthController roboy_middleware_msgs_generate_messages_cpp roboy_control_msgs_generate_messages_cpp)
target_link_libraries(CableLengthController ${catkin_LIBRARIES} CardsflowHardwareInterface)



# Cable Length Velocity Controller
add_library(CableLengthVelocityController src/controller/cableLengthVelocityController.cpp )
add_dependencies(CableLengthVelocityController roboy_middleware_msgs_generate_messages_cpp roboy_control_msgs_generate_messages_cpp)
target_link_libraries(CableLengthVelocityController ${catkin_LIBRARIES} CardsflowHardwareInterface)



# Torque Position Controller
add_library(TorquePositionController src/controller/torquePositionController.cpp )
add_dependencies(TorquePositionController roboy_middleware_msgs_generate_messages_cpp roboy_control_msgs_generate_messages_cpp)
target_link_libraries(TorquePositionController ${catkin_LIBRARIES} CardsflowHardwareInterface)



# Force Position Controller
add_library(ForcePositionController src/controller/forcePositionController.cpp )
add_dependencies(ForcePositionController roboy_middleware_msgs_generate_messages_cpp roboy_control_msgs_generate_messages_cpp)
target_link_libraries(ForcePositionController ${catkin_LIBRARIES} CardsflowHardwareInterface)



# kindyn library
add_library(kindyn SHARED
        src/robot.cpp
		src/kinematics.cpp
		src/EigenExtension.cpp
		include/kindyn/EigenExtension.hpp
		include/kindyn/robot.hpp
		include/kindyn/kinematics.hpp
		include/kindyn/cable.hpp)
add_dependencies(kindyn roboy_simulation_msgs_generate_messages_cpp roboy_simulation_msgs_msgs_generate_messages_cpp)
target_link_libraries(kindyn ${catkin_LIBRARIES} ${iDynTree_LIBRARIES} ${qpOASES_LIBRARIES} CardsflowHardwareInterface
		CableLengthController TorquePositionController ForcePositionController ${OpenMP_CXX_libraries})


# vrpuppet library
add_library(vrpuppet SHARED
		src/vrpuppet.cpp
		src/EigenExtension.cpp
		include/kindyn/EigenExtension.hpp
		include/kindyn/vrpuppet.hpp
		include/kindyn/cable.hpp)
add_dependencies(vrpuppet roboy_simulation_msgs_generate_messages_cpp roboy_simulation_msgs_msgs_generate_messages_cpp)
target_link_libraries(vrpuppet ${catkin_LIBRARIES} ${iDynTree_LIBRARIES} ${qpOASES_LIBRARIES} CardsflowHardwareInterface
		CableLengthController TorquePositionController ForcePositionController ${OpenMP_CXX_libraries})


# testing idyntree
add_executable( test_idyntree src/utilities/test_idyntree.cpp)
target_link_libraries(test_idyntree ${iDynTree_LIBRARIES} ${catkin_LIBRARIES})



# upper_body
add_executable( upper_body src/robots/upper_body.cpp)
target_link_libraries(upper_body ${iDynTree_LIBRARIES} ${catkin_LIBRARIES} vrpuppet kindyn)


#==============================================================================
# Installation
#==============================================================================
install(TARGETS
		kindyn
		CardsflowHardwareInterface
        LIBRARY DESTINATION lib/${PROJECT_NAME}
)


###### do not have target name e.g your_executable_or_library
install(TARGETS
	    DESTINATION lib/${PROJECT_NAME}	
)

install(FILES
    package.xml
    CableLengthController_plugin.xml
    TorquePositionController_plugin.xml
    ForcePositionController_plugin.xml
    DESTINATION share/${PROJECT_NAME}
)

install(DIRECTORY
    include/kindyn/
    include/kindyn/controller
    DESTINATION include/${PROJECT_NAME}
    FILES_MATCHING PATTERN "*.hpp"
)